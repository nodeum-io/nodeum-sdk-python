# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Container(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'comment': 'str',
        'quota_total_size': 'int',
        'quota_on_cache': 'int',
        'stat_total_files': 'int',
        'stat_total_size': 'int',
        'stat_size_on_cache': 'int',
        'guest_right': 'str',
        'last_update': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'comment': 'comment',
        'quota_total_size': 'quota_total_size',
        'quota_on_cache': 'quota_on_cache',
        'stat_total_files': 'stat_total_files',
        'stat_total_size': 'stat_total_size',
        'stat_size_on_cache': 'stat_size_on_cache',
        'guest_right': 'guest_right',
        'last_update': 'last_update'
    }

    def __init__(self, id=None, name=None, comment=None, quota_total_size=None, quota_on_cache=None, stat_total_files=None, stat_total_size=None, stat_size_on_cache=None, guest_right=None, last_update=None):  # noqa: E501
        """Container - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._comment = None
        self._quota_total_size = None
        self._quota_on_cache = None
        self._stat_total_files = None
        self._stat_total_size = None
        self._stat_size_on_cache = None
        self._guest_right = None
        self._last_update = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if quota_total_size is not None:
            self.quota_total_size = quota_total_size
        if quota_on_cache is not None:
            self.quota_on_cache = quota_on_cache
        if stat_total_files is not None:
            self.stat_total_files = stat_total_files
        if stat_total_size is not None:
            self.stat_total_size = stat_total_size
        if stat_size_on_cache is not None:
            self.stat_size_on_cache = stat_size_on_cache
        if guest_right is not None:
            self.guest_right = guest_right
        if last_update is not None:
            self.last_update = last_update

    @property
    def id(self):
        """Gets the id of this Container.  # noqa: E501


        :return: The id of this Container.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Container.


        :param id: The id of this Container.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Container.  # noqa: E501


        :return: The name of this Container.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.


        :param name: The name of this Container.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this Container.  # noqa: E501


        :return: The comment of this Container.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Container.


        :param comment: The comment of this Container.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def quota_total_size(self):
        """Gets the quota_total_size of this Container.  # noqa: E501


        :return: The quota_total_size of this Container.  # noqa: E501
        :rtype: int
        """
        return self._quota_total_size

    @quota_total_size.setter
    def quota_total_size(self, quota_total_size):
        """Sets the quota_total_size of this Container.


        :param quota_total_size: The quota_total_size of this Container.  # noqa: E501
        :type: int
        """

        self._quota_total_size = quota_total_size

    @property
    def quota_on_cache(self):
        """Gets the quota_on_cache of this Container.  # noqa: E501


        :return: The quota_on_cache of this Container.  # noqa: E501
        :rtype: int
        """
        return self._quota_on_cache

    @quota_on_cache.setter
    def quota_on_cache(self, quota_on_cache):
        """Sets the quota_on_cache of this Container.


        :param quota_on_cache: The quota_on_cache of this Container.  # noqa: E501
        :type: int
        """

        self._quota_on_cache = quota_on_cache

    @property
    def stat_total_files(self):
        """Gets the stat_total_files of this Container.  # noqa: E501


        :return: The stat_total_files of this Container.  # noqa: E501
        :rtype: int
        """
        return self._stat_total_files

    @stat_total_files.setter
    def stat_total_files(self, stat_total_files):
        """Sets the stat_total_files of this Container.


        :param stat_total_files: The stat_total_files of this Container.  # noqa: E501
        :type: int
        """

        self._stat_total_files = stat_total_files

    @property
    def stat_total_size(self):
        """Gets the stat_total_size of this Container.  # noqa: E501


        :return: The stat_total_size of this Container.  # noqa: E501
        :rtype: int
        """
        return self._stat_total_size

    @stat_total_size.setter
    def stat_total_size(self, stat_total_size):
        """Sets the stat_total_size of this Container.


        :param stat_total_size: The stat_total_size of this Container.  # noqa: E501
        :type: int
        """

        self._stat_total_size = stat_total_size

    @property
    def stat_size_on_cache(self):
        """Gets the stat_size_on_cache of this Container.  # noqa: E501


        :return: The stat_size_on_cache of this Container.  # noqa: E501
        :rtype: int
        """
        return self._stat_size_on_cache

    @stat_size_on_cache.setter
    def stat_size_on_cache(self, stat_size_on_cache):
        """Sets the stat_size_on_cache of this Container.


        :param stat_size_on_cache: The stat_size_on_cache of this Container.  # noqa: E501
        :type: int
        """

        self._stat_size_on_cache = stat_size_on_cache

    @property
    def guest_right(self):
        """Gets the guest_right of this Container.  # noqa: E501


        :return: The guest_right of this Container.  # noqa: E501
        :rtype: str
        """
        return self._guest_right

    @guest_right.setter
    def guest_right(self, guest_right):
        """Sets the guest_right of this Container.


        :param guest_right: The guest_right of this Container.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "read", "read_write"]  # noqa: E501
        if guest_right not in allowed_values:
            raise ValueError(
                "Invalid value for `guest_right` ({0}), must be one of {1}"  # noqa: E501
                .format(guest_right, allowed_values)
            )

        self._guest_right = guest_right

    @property
    def last_update(self):
        """Gets the last_update of this Container.  # noqa: E501


        :return: The last_update of this Container.  # noqa: E501
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Container.


        :param last_update: The last_update of this Container.  # noqa: E501
        :type: str
        """

        self._last_update = last_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Container, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Container):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
