# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskDestinationUp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_id': 'int',
        'folder_path': 'str',
        'tape_id': 'int',
        'tape_barcode': 'str',
        'tape_pool_id': 'int',
        'tape_pool_name': 'str',
        'cloud_pool_id': 'int',
        'cloud_pool_name': 'str',
        'nas_pool_id': 'int',
        'nas_pool_name': 'str'
    }

    attribute_map = {
        'folder_id': 'folder_id',
        'folder_path': 'folder_path',
        'tape_id': 'tape_id',
        'tape_barcode': 'tape_barcode',
        'tape_pool_id': 'tape_pool_id',
        'tape_pool_name': 'tape_pool_name',
        'cloud_pool_id': 'cloud_pool_id',
        'cloud_pool_name': 'cloud_pool_name',
        'nas_pool_id': 'nas_pool_id',
        'nas_pool_name': 'nas_pool_name'
    }

    def __init__(self, folder_id=None, folder_path=None, tape_id=None, tape_barcode=None, tape_pool_id=None, tape_pool_name=None, cloud_pool_id=None, cloud_pool_name=None, nas_pool_id=None, nas_pool_name=None):  # noqa: E501
        """TaskDestinationUp - a model defined in Swagger"""  # noqa: E501

        self._folder_id = None
        self._folder_path = None
        self._tape_id = None
        self._tape_barcode = None
        self._tape_pool_id = None
        self._tape_pool_name = None
        self._cloud_pool_id = None
        self._cloud_pool_name = None
        self._nas_pool_id = None
        self._nas_pool_name = None
        self.discriminator = None

        if folder_id is not None:
            self.folder_id = folder_id
        if folder_path is not None:
            self.folder_path = folder_path
        if tape_id is not None:
            self.tape_id = tape_id
        if tape_barcode is not None:
            self.tape_barcode = tape_barcode
        if tape_pool_id is not None:
            self.tape_pool_id = tape_pool_id
        if tape_pool_name is not None:
            self.tape_pool_name = tape_pool_name
        if cloud_pool_id is not None:
            self.cloud_pool_id = cloud_pool_id
        if cloud_pool_name is not None:
            self.cloud_pool_name = cloud_pool_name
        if nas_pool_id is not None:
            self.nas_pool_id = nas_pool_id
        if nas_pool_name is not None:
            self.nas_pool_name = nas_pool_name

    @property
    def folder_id(self):
        """Gets the folder_id of this TaskDestinationUp.  # noqa: E501


        :return: The folder_id of this TaskDestinationUp.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this TaskDestinationUp.


        :param folder_id: The folder_id of this TaskDestinationUp.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def folder_path(self):
        """Gets the folder_path of this TaskDestinationUp.  # noqa: E501


        :return: The folder_path of this TaskDestinationUp.  # noqa: E501
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this TaskDestinationUp.


        :param folder_path: The folder_path of this TaskDestinationUp.  # noqa: E501
        :type: str
        """

        self._folder_path = folder_path

    @property
    def tape_id(self):
        """Gets the tape_id of this TaskDestinationUp.  # noqa: E501


        :return: The tape_id of this TaskDestinationUp.  # noqa: E501
        :rtype: int
        """
        return self._tape_id

    @tape_id.setter
    def tape_id(self, tape_id):
        """Sets the tape_id of this TaskDestinationUp.


        :param tape_id: The tape_id of this TaskDestinationUp.  # noqa: E501
        :type: int
        """

        self._tape_id = tape_id

    @property
    def tape_barcode(self):
        """Gets the tape_barcode of this TaskDestinationUp.  # noqa: E501


        :return: The tape_barcode of this TaskDestinationUp.  # noqa: E501
        :rtype: str
        """
        return self._tape_barcode

    @tape_barcode.setter
    def tape_barcode(self, tape_barcode):
        """Sets the tape_barcode of this TaskDestinationUp.


        :param tape_barcode: The tape_barcode of this TaskDestinationUp.  # noqa: E501
        :type: str
        """

        self._tape_barcode = tape_barcode

    @property
    def tape_pool_id(self):
        """Gets the tape_pool_id of this TaskDestinationUp.  # noqa: E501


        :return: The tape_pool_id of this TaskDestinationUp.  # noqa: E501
        :rtype: int
        """
        return self._tape_pool_id

    @tape_pool_id.setter
    def tape_pool_id(self, tape_pool_id):
        """Sets the tape_pool_id of this TaskDestinationUp.


        :param tape_pool_id: The tape_pool_id of this TaskDestinationUp.  # noqa: E501
        :type: int
        """

        self._tape_pool_id = tape_pool_id

    @property
    def tape_pool_name(self):
        """Gets the tape_pool_name of this TaskDestinationUp.  # noqa: E501


        :return: The tape_pool_name of this TaskDestinationUp.  # noqa: E501
        :rtype: str
        """
        return self._tape_pool_name

    @tape_pool_name.setter
    def tape_pool_name(self, tape_pool_name):
        """Sets the tape_pool_name of this TaskDestinationUp.


        :param tape_pool_name: The tape_pool_name of this TaskDestinationUp.  # noqa: E501
        :type: str
        """

        self._tape_pool_name = tape_pool_name

    @property
    def cloud_pool_id(self):
        """Gets the cloud_pool_id of this TaskDestinationUp.  # noqa: E501


        :return: The cloud_pool_id of this TaskDestinationUp.  # noqa: E501
        :rtype: int
        """
        return self._cloud_pool_id

    @cloud_pool_id.setter
    def cloud_pool_id(self, cloud_pool_id):
        """Sets the cloud_pool_id of this TaskDestinationUp.


        :param cloud_pool_id: The cloud_pool_id of this TaskDestinationUp.  # noqa: E501
        :type: int
        """

        self._cloud_pool_id = cloud_pool_id

    @property
    def cloud_pool_name(self):
        """Gets the cloud_pool_name of this TaskDestinationUp.  # noqa: E501


        :return: The cloud_pool_name of this TaskDestinationUp.  # noqa: E501
        :rtype: str
        """
        return self._cloud_pool_name

    @cloud_pool_name.setter
    def cloud_pool_name(self, cloud_pool_name):
        """Sets the cloud_pool_name of this TaskDestinationUp.


        :param cloud_pool_name: The cloud_pool_name of this TaskDestinationUp.  # noqa: E501
        :type: str
        """

        self._cloud_pool_name = cloud_pool_name

    @property
    def nas_pool_id(self):
        """Gets the nas_pool_id of this TaskDestinationUp.  # noqa: E501


        :return: The nas_pool_id of this TaskDestinationUp.  # noqa: E501
        :rtype: int
        """
        return self._nas_pool_id

    @nas_pool_id.setter
    def nas_pool_id(self, nas_pool_id):
        """Sets the nas_pool_id of this TaskDestinationUp.


        :param nas_pool_id: The nas_pool_id of this TaskDestinationUp.  # noqa: E501
        :type: int
        """

        self._nas_pool_id = nas_pool_id

    @property
    def nas_pool_name(self):
        """Gets the nas_pool_name of this TaskDestinationUp.  # noqa: E501


        :return: The nas_pool_name of this TaskDestinationUp.  # noqa: E501
        :rtype: str
        """
        return self._nas_pool_name

    @nas_pool_name.setter
    def nas_pool_name(self, nas_pool_name):
        """Sets the nas_pool_name of this TaskDestinationUp.


        :param nas_pool_name: The nas_pool_name of this TaskDestinationUp.  # noqa: E501
        :type: str
        """

        self._nas_pool_name = nas_pool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDestinationUp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDestinationUp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
