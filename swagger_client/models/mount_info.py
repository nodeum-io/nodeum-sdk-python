# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MountInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'major_minor': 'str',
        'target': 'str',
        'source': 'str',
        'options': 'str',
        'type': 'str',
        'nas_id': 'int',
        'nas_name': 'str',
        'nas_share_id': 'int',
        'nas_pool_id': 'int',
        'nas_pool_name': 'str',
        'cloud_connector_id': 'int',
        'cloud_connector_name': 'str',
        'cloud_bucket_id': 'int',
        'cloud_bucket_name': 'str',
        'cloud_pool_id': 'int',
        'cloud_pool_name': 'str',
        'mount_point_id': 'int',
        'mount_point_name': 'str',
        'tape_id': 'int',
        'tape_barcode': 'str',
        'tape_library_id': 'int',
        'tape_library_name': 'str',
        'tape_library_serial': 'str'
    }

    attribute_map = {
        'id': 'id',
        'major_minor': 'major_minor',
        'target': 'target',
        'source': 'source',
        'options': 'options',
        'type': 'type',
        'nas_id': 'nas_id',
        'nas_name': 'nas_name',
        'nas_share_id': 'nas_share_id',
        'nas_pool_id': 'nas_pool_id',
        'nas_pool_name': 'nas_pool_name',
        'cloud_connector_id': 'cloud_connector_id',
        'cloud_connector_name': 'cloud_connector_name',
        'cloud_bucket_id': 'cloud_bucket_id',
        'cloud_bucket_name': 'cloud_bucket_name',
        'cloud_pool_id': 'cloud_pool_id',
        'cloud_pool_name': 'cloud_pool_name',
        'mount_point_id': 'mount_point_id',
        'mount_point_name': 'mount_point_name',
        'tape_id': 'tape_id',
        'tape_barcode': 'tape_barcode',
        'tape_library_id': 'tape_library_id',
        'tape_library_name': 'tape_library_name',
        'tape_library_serial': 'tape_library_serial'
    }

    def __init__(self, id=None, major_minor=None, target=None, source=None, options=None, type=None, nas_id=None, nas_name=None, nas_share_id=None, nas_pool_id=None, nas_pool_name=None, cloud_connector_id=None, cloud_connector_name=None, cloud_bucket_id=None, cloud_bucket_name=None, cloud_pool_id=None, cloud_pool_name=None, mount_point_id=None, mount_point_name=None, tape_id=None, tape_barcode=None, tape_library_id=None, tape_library_name=None, tape_library_serial=None):  # noqa: E501
        """MountInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._major_minor = None
        self._target = None
        self._source = None
        self._options = None
        self._type = None
        self._nas_id = None
        self._nas_name = None
        self._nas_share_id = None
        self._nas_pool_id = None
        self._nas_pool_name = None
        self._cloud_connector_id = None
        self._cloud_connector_name = None
        self._cloud_bucket_id = None
        self._cloud_bucket_name = None
        self._cloud_pool_id = None
        self._cloud_pool_name = None
        self._mount_point_id = None
        self._mount_point_name = None
        self._tape_id = None
        self._tape_barcode = None
        self._tape_library_id = None
        self._tape_library_name = None
        self._tape_library_serial = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if major_minor is not None:
            self.major_minor = major_minor
        if target is not None:
            self.target = target
        if source is not None:
            self.source = source
        if options is not None:
            self.options = options
        if type is not None:
            self.type = type
        if nas_id is not None:
            self.nas_id = nas_id
        if nas_name is not None:
            self.nas_name = nas_name
        if nas_share_id is not None:
            self.nas_share_id = nas_share_id
        if nas_pool_id is not None:
            self.nas_pool_id = nas_pool_id
        if nas_pool_name is not None:
            self.nas_pool_name = nas_pool_name
        if cloud_connector_id is not None:
            self.cloud_connector_id = cloud_connector_id
        if cloud_connector_name is not None:
            self.cloud_connector_name = cloud_connector_name
        if cloud_bucket_id is not None:
            self.cloud_bucket_id = cloud_bucket_id
        if cloud_bucket_name is not None:
            self.cloud_bucket_name = cloud_bucket_name
        if cloud_pool_id is not None:
            self.cloud_pool_id = cloud_pool_id
        if cloud_pool_name is not None:
            self.cloud_pool_name = cloud_pool_name
        if mount_point_id is not None:
            self.mount_point_id = mount_point_id
        if mount_point_name is not None:
            self.mount_point_name = mount_point_name
        if tape_id is not None:
            self.tape_id = tape_id
        if tape_barcode is not None:
            self.tape_barcode = tape_barcode
        if tape_library_id is not None:
            self.tape_library_id = tape_library_id
        if tape_library_name is not None:
            self.tape_library_name = tape_library_name
        if tape_library_serial is not None:
            self.tape_library_serial = tape_library_serial

    @property
    def id(self):
        """Gets the id of this MountInfo.  # noqa: E501


        :return: The id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MountInfo.


        :param id: The id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def major_minor(self):
        """Gets the major_minor of this MountInfo.  # noqa: E501


        :return: The major_minor of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._major_minor

    @major_minor.setter
    def major_minor(self, major_minor):
        """Sets the major_minor of this MountInfo.


        :param major_minor: The major_minor of this MountInfo.  # noqa: E501
        :type: str
        """

        self._major_minor = major_minor

    @property
    def target(self):
        """Gets the target of this MountInfo.  # noqa: E501


        :return: The target of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MountInfo.


        :param target: The target of this MountInfo.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def source(self):
        """Gets the source of this MountInfo.  # noqa: E501


        :return: The source of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MountInfo.


        :param source: The source of this MountInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def options(self):
        """Gets the options of this MountInfo.  # noqa: E501


        :return: The options of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MountInfo.


        :param options: The options of this MountInfo.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def type(self):
        """Gets the type of this MountInfo.  # noqa: E501


        :return: The type of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MountInfo.


        :param type: The type of this MountInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["cifs", "nfs", "fuse.s3fs", "fuse.core_fuse", "fuse"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def nas_id(self):
        """Gets the nas_id of this MountInfo.  # noqa: E501


        :return: The nas_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._nas_id

    @nas_id.setter
    def nas_id(self, nas_id):
        """Sets the nas_id of this MountInfo.


        :param nas_id: The nas_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._nas_id = nas_id

    @property
    def nas_name(self):
        """Gets the nas_name of this MountInfo.  # noqa: E501


        :return: The nas_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._nas_name

    @nas_name.setter
    def nas_name(self, nas_name):
        """Sets the nas_name of this MountInfo.


        :param nas_name: The nas_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._nas_name = nas_name

    @property
    def nas_share_id(self):
        """Gets the nas_share_id of this MountInfo.  # noqa: E501


        :return: The nas_share_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._nas_share_id

    @nas_share_id.setter
    def nas_share_id(self, nas_share_id):
        """Sets the nas_share_id of this MountInfo.


        :param nas_share_id: The nas_share_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._nas_share_id = nas_share_id

    @property
    def nas_pool_id(self):
        """Gets the nas_pool_id of this MountInfo.  # noqa: E501


        :return: The nas_pool_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._nas_pool_id

    @nas_pool_id.setter
    def nas_pool_id(self, nas_pool_id):
        """Sets the nas_pool_id of this MountInfo.


        :param nas_pool_id: The nas_pool_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._nas_pool_id = nas_pool_id

    @property
    def nas_pool_name(self):
        """Gets the nas_pool_name of this MountInfo.  # noqa: E501


        :return: The nas_pool_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._nas_pool_name

    @nas_pool_name.setter
    def nas_pool_name(self, nas_pool_name):
        """Sets the nas_pool_name of this MountInfo.


        :param nas_pool_name: The nas_pool_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._nas_pool_name = nas_pool_name

    @property
    def cloud_connector_id(self):
        """Gets the cloud_connector_id of this MountInfo.  # noqa: E501


        :return: The cloud_connector_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._cloud_connector_id

    @cloud_connector_id.setter
    def cloud_connector_id(self, cloud_connector_id):
        """Sets the cloud_connector_id of this MountInfo.


        :param cloud_connector_id: The cloud_connector_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._cloud_connector_id = cloud_connector_id

    @property
    def cloud_connector_name(self):
        """Gets the cloud_connector_name of this MountInfo.  # noqa: E501


        :return: The cloud_connector_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._cloud_connector_name

    @cloud_connector_name.setter
    def cloud_connector_name(self, cloud_connector_name):
        """Sets the cloud_connector_name of this MountInfo.


        :param cloud_connector_name: The cloud_connector_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._cloud_connector_name = cloud_connector_name

    @property
    def cloud_bucket_id(self):
        """Gets the cloud_bucket_id of this MountInfo.  # noqa: E501


        :return: The cloud_bucket_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._cloud_bucket_id

    @cloud_bucket_id.setter
    def cloud_bucket_id(self, cloud_bucket_id):
        """Sets the cloud_bucket_id of this MountInfo.


        :param cloud_bucket_id: The cloud_bucket_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._cloud_bucket_id = cloud_bucket_id

    @property
    def cloud_bucket_name(self):
        """Gets the cloud_bucket_name of this MountInfo.  # noqa: E501


        :return: The cloud_bucket_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._cloud_bucket_name

    @cloud_bucket_name.setter
    def cloud_bucket_name(self, cloud_bucket_name):
        """Sets the cloud_bucket_name of this MountInfo.


        :param cloud_bucket_name: The cloud_bucket_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._cloud_bucket_name = cloud_bucket_name

    @property
    def cloud_pool_id(self):
        """Gets the cloud_pool_id of this MountInfo.  # noqa: E501


        :return: The cloud_pool_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._cloud_pool_id

    @cloud_pool_id.setter
    def cloud_pool_id(self, cloud_pool_id):
        """Sets the cloud_pool_id of this MountInfo.


        :param cloud_pool_id: The cloud_pool_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._cloud_pool_id = cloud_pool_id

    @property
    def cloud_pool_name(self):
        """Gets the cloud_pool_name of this MountInfo.  # noqa: E501


        :return: The cloud_pool_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._cloud_pool_name

    @cloud_pool_name.setter
    def cloud_pool_name(self, cloud_pool_name):
        """Sets the cloud_pool_name of this MountInfo.


        :param cloud_pool_name: The cloud_pool_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._cloud_pool_name = cloud_pool_name

    @property
    def mount_point_id(self):
        """Gets the mount_point_id of this MountInfo.  # noqa: E501


        :return: The mount_point_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._mount_point_id

    @mount_point_id.setter
    def mount_point_id(self, mount_point_id):
        """Sets the mount_point_id of this MountInfo.


        :param mount_point_id: The mount_point_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._mount_point_id = mount_point_id

    @property
    def mount_point_name(self):
        """Gets the mount_point_name of this MountInfo.  # noqa: E501


        :return: The mount_point_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._mount_point_name

    @mount_point_name.setter
    def mount_point_name(self, mount_point_name):
        """Sets the mount_point_name of this MountInfo.


        :param mount_point_name: The mount_point_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._mount_point_name = mount_point_name

    @property
    def tape_id(self):
        """Gets the tape_id of this MountInfo.  # noqa: E501


        :return: The tape_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._tape_id

    @tape_id.setter
    def tape_id(self, tape_id):
        """Sets the tape_id of this MountInfo.


        :param tape_id: The tape_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._tape_id = tape_id

    @property
    def tape_barcode(self):
        """Gets the tape_barcode of this MountInfo.  # noqa: E501


        :return: The tape_barcode of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._tape_barcode

    @tape_barcode.setter
    def tape_barcode(self, tape_barcode):
        """Sets the tape_barcode of this MountInfo.


        :param tape_barcode: The tape_barcode of this MountInfo.  # noqa: E501
        :type: str
        """

        self._tape_barcode = tape_barcode

    @property
    def tape_library_id(self):
        """Gets the tape_library_id of this MountInfo.  # noqa: E501


        :return: The tape_library_id of this MountInfo.  # noqa: E501
        :rtype: int
        """
        return self._tape_library_id

    @tape_library_id.setter
    def tape_library_id(self, tape_library_id):
        """Sets the tape_library_id of this MountInfo.


        :param tape_library_id: The tape_library_id of this MountInfo.  # noqa: E501
        :type: int
        """

        self._tape_library_id = tape_library_id

    @property
    def tape_library_name(self):
        """Gets the tape_library_name of this MountInfo.  # noqa: E501


        :return: The tape_library_name of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._tape_library_name

    @tape_library_name.setter
    def tape_library_name(self, tape_library_name):
        """Sets the tape_library_name of this MountInfo.


        :param tape_library_name: The tape_library_name of this MountInfo.  # noqa: E501
        :type: str
        """

        self._tape_library_name = tape_library_name

    @property
    def tape_library_serial(self):
        """Gets the tape_library_serial of this MountInfo.  # noqa: E501


        :return: The tape_library_serial of this MountInfo.  # noqa: E501
        :rtype: str
        """
        return self._tape_library_serial

    @tape_library_serial.setter
    def tape_library_serial(self, tape_library_serial):
        """Sets the tape_library_serial of this MountInfo.


        :param tape_library_serial: The tape_library_serial of this MountInfo.  # noqa: E501
        :type: str
        """

        self._tape_library_serial = tape_library_serial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
