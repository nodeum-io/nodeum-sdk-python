# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TaskDestinationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_task_destination(self, task_id, task_destination_body, **kwargs):  # noqa: E501
        """Creates a new task destination.  # noqa: E501

        **API Key Scope**: task_destinations / create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_destination(task_id, task_destination_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param TaskDestinationUp task_destination_body: (required)
        :return: TaskDestinationDown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_task_destination_with_http_info(task_id, task_destination_body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_task_destination_with_http_info(task_id, task_destination_body, **kwargs)  # noqa: E501
            return data

    def create_task_destination_with_http_info(self, task_id, task_destination_body, **kwargs):  # noqa: E501
        """Creates a new task destination.  # noqa: E501

        **API Key Scope**: task_destinations / create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_destination_with_http_info(task_id, task_destination_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param TaskDestinationUp task_destination_body: (required)
        :return: TaskDestinationDown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_destination_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_task_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `create_task_destination`")  # noqa: E501
        # verify the required parameter 'task_destination_body' is set
        if ('task_destination_body' not in params or
                params['task_destination_body'] is None):
            raise ValueError("Missing the required parameter `task_destination_body` when calling `create_task_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_destination_body' in params:
            body_params = params['task_destination_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_destinations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskDestinationDown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_task_destination(self, task_id, task_destination_id, **kwargs):  # noqa: E501
        """Destroys a specific task destination.  # noqa: E501

        **API Key Scope**: task_destinations / destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_task_destination(task_id, task_destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_destination_id: Numeric ID of task destination. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_task_destination_with_http_info(task_id, task_destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_task_destination_with_http_info(task_id, task_destination_id, **kwargs)  # noqa: E501
            return data

    def destroy_task_destination_with_http_info(self, task_id, task_destination_id, **kwargs):  # noqa: E501
        """Destroys a specific task destination.  # noqa: E501

        **API Key Scope**: task_destinations / destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_task_destination_with_http_info(task_id, task_destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_destination_id: Numeric ID of task destination. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_task_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `destroy_task_destination`")  # noqa: E501
        # verify the required parameter 'task_destination_id' is set
        if ('task_destination_id' not in params or
                params['task_destination_id'] is None):
            raise ValueError("Missing the required parameter `task_destination_id` when calling `destroy_task_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'task_destination_id' in params:
            path_params['task_destination_id'] = params['task_destination_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_destinations/{task_destination_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_task_destinations(self, task_id, **kwargs):  # noqa: E501
        """Lists all task destinations.  # noqa: E501

        Filter and pagination parameters are not available for this API.  **API Key Scope**: task_destinations / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_task_destinations(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :return: TaskDestinationCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_task_destinations_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_task_destinations_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def index_task_destinations_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Lists all task destinations.  # noqa: E501

        Filter and pagination parameters are not available for this API.  **API Key Scope**: task_destinations / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_task_destinations_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :return: TaskDestinationCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_task_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `index_task_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_destinations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskDestinationCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_task_destination(self, task_id, task_destination_id, **kwargs):  # noqa: E501
        """Displays a specific task destination.  # noqa: E501

        **API Key Scope**: task_destinations / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_task_destination(task_id, task_destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_destination_id: Numeric ID of task destination. (required)
        :return: TaskDestinationDown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_task_destination_with_http_info(task_id, task_destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_task_destination_with_http_info(task_id, task_destination_id, **kwargs)  # noqa: E501
            return data

    def show_task_destination_with_http_info(self, task_id, task_destination_id, **kwargs):  # noqa: E501
        """Displays a specific task destination.  # noqa: E501

        **API Key Scope**: task_destinations / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_task_destination_with_http_info(task_id, task_destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_destination_id: Numeric ID of task destination. (required)
        :return: TaskDestinationDown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_task_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `show_task_destination`")  # noqa: E501
        # verify the required parameter 'task_destination_id' is set
        if ('task_destination_id' not in params or
                params['task_destination_id'] is None):
            raise ValueError("Missing the required parameter `task_destination_id` when calling `show_task_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'task_destination_id' in params:
            path_params['task_destination_id'] = params['task_destination_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_destinations/{task_destination_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskDestinationDown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_task_destination(self, task_id, task_destination_id, task_destination_body, **kwargs):  # noqa: E501
        """Updates a specific task destination.  # noqa: E501

        **API Key Scope**: task_destinations / update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_task_destination(task_id, task_destination_id, task_destination_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_destination_id: Numeric ID of task destination. (required)
        :param TaskDestinationUp task_destination_body: (required)
        :return: TaskDestinationDown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_task_destination_with_http_info(task_id, task_destination_id, task_destination_body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_task_destination_with_http_info(task_id, task_destination_id, task_destination_body, **kwargs)  # noqa: E501
            return data

    def update_task_destination_with_http_info(self, task_id, task_destination_id, task_destination_body, **kwargs):  # noqa: E501
        """Updates a specific task destination.  # noqa: E501

        **API Key Scope**: task_destinations / update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_task_destination_with_http_info(task_id, task_destination_id, task_destination_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_destination_id: Numeric ID of task destination. (required)
        :param TaskDestinationUp task_destination_body: (required)
        :return: TaskDestinationDown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_destination_id', 'task_destination_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `update_task_destination`")  # noqa: E501
        # verify the required parameter 'task_destination_id' is set
        if ('task_destination_id' not in params or
                params['task_destination_id'] is None):
            raise ValueError("Missing the required parameter `task_destination_id` when calling `update_task_destination`")  # noqa: E501
        # verify the required parameter 'task_destination_body' is set
        if ('task_destination_body' not in params or
                params['task_destination_body'] is None):
            raise ValueError("Missing the required parameter `task_destination_body` when calling `update_task_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'task_destination_id' in params:
            path_params['task_destination_id'] = params['task_destination_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_destination_body' in params:
            body_params = params['task_destination_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_destinations/{task_destination_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskDestinationDown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
