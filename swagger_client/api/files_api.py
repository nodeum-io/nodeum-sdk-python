# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def files_children(self, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children(file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_with_http_info(file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_with_http_info(file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_with_http_info(self, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_with_http_info(file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_cloud_pool(self, cloud_pool_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_cloud_pool(cloud_pool_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_pool_id: Numeric ID or name of cloud pool. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_cloud_pool_with_http_info(cloud_pool_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_cloud_pool_with_http_info(cloud_pool_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_cloud_pool_with_http_info(self, cloud_pool_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_cloud_pool_with_http_info(cloud_pool_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_pool_id: Numeric ID or name of cloud pool. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_pool_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_cloud_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_pool_id' is set
        if ('cloud_pool_id' not in params or
                params['cloud_pool_id'] is None):
            raise ValueError("Missing the required parameter `cloud_pool_id` when calling `files_children_by_cloud_pool`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_cloud_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_pool_id' in params:
            path_params['cloud_pool_id'] = params['cloud_pool_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cloud_pools/{cloud_pool_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_container(self, container_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_container(container_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_id: Numeric ID or name of container. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_container_with_http_info(container_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_container_with_http_info(container_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_container_with_http_info(self, container_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_container_with_http_info(container_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_id: Numeric ID or name of container. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `files_children_by_container`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{container_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_nas_pool(self, nas_pool_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_nas_pool(nas_pool_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nas_pool_id: Numeric ID or name of NAS pool. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_nas_pool_with_http_info(nas_pool_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_nas_pool_with_http_info(nas_pool_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_nas_pool_with_http_info(self, nas_pool_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_nas_pool_with_http_info(nas_pool_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nas_pool_id: Numeric ID or name of NAS pool. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nas_pool_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_nas_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nas_pool_id' is set
        if ('nas_pool_id' not in params or
                params['nas_pool_id'] is None):
            raise ValueError("Missing the required parameter `nas_pool_id` when calling `files_children_by_nas_pool`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_nas_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nas_pool_id' in params:
            path_params['nas_pool_id'] = params['nas_pool_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nas_pools/{nas_pool_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_tape_pool(self, tape_pool_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_tape_pool(tape_pool_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_tape_pool_with_http_info(tape_pool_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_tape_pool_with_http_info(tape_pool_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_tape_pool_with_http_info(self, tape_pool_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_tape_pool_with_http_info(tape_pool_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `files_children_by_tape_pool`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_task(self, task_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_task(task_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_task_with_http_info(task_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_task_with_http_info(task_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_task_with_http_info(self, task_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_task_with_http_info(task_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `files_children_by_task`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_task_execution(self, task_execution_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_task_execution(task_execution_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_task_execution_with_http_info(task_execution_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_task_execution_with_http_info(task_execution_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_task_execution_with_http_info(self, task_execution_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_task_execution_with_http_info(task_execution_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_execution_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_task_execution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_execution_id' is set
        if ('task_execution_id' not in params or
                params['task_execution_id'] is None):
            raise ValueError("Missing the required parameter `task_execution_id` when calling `files_children_by_task_execution`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_task_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_execution_id' in params:
            path_params['task_execution_id'] = params['task_execution_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/task_executions/{task_execution_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_children_by_task_execution_by_task(self, task_id, task_execution_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_task_execution_by_task(task_id, task_execution_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_children_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_children_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_parent_id, **kwargs)  # noqa: E501
            return data

    def files_children_by_task_execution_by_task_with_http_info(self, task_id, task_execution_id, file_parent_id, **kwargs):  # noqa: E501
        """Lists files under a specific folder.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_children_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_parent_id: Numeric ID of parent folder. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_execution_id', 'file_parent_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_children_by_task_execution_by_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `files_children_by_task_execution_by_task`")  # noqa: E501
        # verify the required parameter 'task_execution_id' is set
        if ('task_execution_id' not in params or
                params['task_execution_id'] is None):
            raise ValueError("Missing the required parameter `task_execution_id` when calling `files_children_by_task_execution_by_task`")  # noqa: E501
        # verify the required parameter 'file_parent_id' is set
        if ('file_parent_id' not in params or
                params['file_parent_id'] is None):
            raise ValueError("Missing the required parameter `file_parent_id` when calling `files_children_by_task_execution_by_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'task_execution_id' in params:
            path_params['task_execution_id'] = params['task_execution_id']  # noqa: E501
        if 'file_parent_id' in params:
            path_params['file_parent_id'] = params['file_parent_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files(self, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.index_files_with_http_info(**kwargs)  # noqa: E501
            return data

    def index_files_with_http_info(self, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_cloud_pool(self, cloud_pool_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_cloud_pool(cloud_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_pool_id: Numeric ID or name of cloud pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_cloud_pool_with_http_info(cloud_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_cloud_pool_with_http_info(cloud_pool_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_cloud_pool_with_http_info(self, cloud_pool_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_cloud_pool_with_http_info(cloud_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_pool_id: Numeric ID or name of cloud pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_pool_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_cloud_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_pool_id' is set
        if ('cloud_pool_id' not in params or
                params['cloud_pool_id'] is None):
            raise ValueError("Missing the required parameter `cloud_pool_id` when calling `index_files_by_cloud_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_pool_id' in params:
            path_params['cloud_pool_id'] = params['cloud_pool_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cloud_pools/{cloud_pool_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_container(self, container_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_container(container_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_id: Numeric ID or name of container. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_container_with_http_info(container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_container_with_http_info(container_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_container_with_http_info(self, container_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_container_with_http_info(container_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_id: Numeric ID or name of container. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `index_files_by_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{container_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_nas_pool(self, nas_pool_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_nas_pool(nas_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nas_pool_id: Numeric ID or name of NAS pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_nas_pool_with_http_info(nas_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_nas_pool_with_http_info(nas_pool_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_nas_pool_with_http_info(self, nas_pool_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_nas_pool_with_http_info(nas_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nas_pool_id: Numeric ID or name of NAS pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nas_pool_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_nas_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nas_pool_id' is set
        if ('nas_pool_id' not in params or
                params['nas_pool_id'] is None):
            raise ValueError("Missing the required parameter `nas_pool_id` when calling `index_files_by_nas_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nas_pool_id' in params:
            path_params['nas_pool_id'] = params['nas_pool_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nas_pools/{nas_pool_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_tape_pool(self, tape_pool_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_tape_pool(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_tape_pool_with_http_info(self, tape_pool_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_tape_pool_with_http_info(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `index_files_by_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_task(self, task_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_task(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_task_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_task_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_task_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_task_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `index_files_by_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_task_execution(self, task_execution_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_task_execution(task_execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_task_execution_with_http_info(task_execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_task_execution_with_http_info(task_execution_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_task_execution_with_http_info(self, task_execution_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_task_execution_with_http_info(task_execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_execution_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_task_execution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_execution_id' is set
        if ('task_execution_id' not in params or
                params['task_execution_id'] is None):
            raise ValueError("Missing the required parameter `task_execution_id` when calling `index_files_by_task_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_execution_id' in params:
            path_params['task_execution_id'] = params['task_execution_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/task_executions/{task_execution_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_files_by_task_execution_by_task(self, task_id, task_execution_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_task_execution_by_task(task_id, task_execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_files_by_task_execution_by_task_with_http_info(task_id, task_execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_files_by_task_execution_by_task_with_http_info(task_id, task_execution_id, **kwargs)  # noqa: E501
            return data

    def index_files_by_task_execution_by_task_with_http_info(self, task_id, task_execution_id, **kwargs):  # noqa: E501
        """Lists files on root.  # noqa: E501

        **API Key Scope**: files / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_files_by_task_execution_by_task_with_http_info(task_id, task_execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param str file_id: Filter on file id
        :param str name: Filter on name
        :param str type: Filter on type
        :param str permission: Filter on permission
        :param str size: Filter on size
        :param str change_date: Filter on change date
        :param str modification_date: Filter on modification date
        :param str access_date: Filter on access date
        :param str gid: Filter on gid
        :param str uid: Filter on uid
        :return: NodeumFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_execution_id', 'limit', 'offset', 'file_id', 'name', 'type', 'permission', 'size', 'change_date', 'modification_date', 'access_date', 'gid', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_files_by_task_execution_by_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `index_files_by_task_execution_by_task`")  # noqa: E501
        # verify the required parameter 'task_execution_id' is set
        if ('task_execution_id' not in params or
                params['task_execution_id'] is None):
            raise ValueError("Missing the required parameter `task_execution_id` when calling `index_files_by_task_execution_by_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'task_execution_id' in params:
            path_params['task_execution_id'] = params['task_execution_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('file_id', params['file_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'change_date' in params:
            query_params.append(('change_date', params['change_date']))  # noqa: E501
        if 'modification_date' in params:
            query_params.append(('modification_date', params['modification_date']))  # noqa: E501
        if 'access_date' in params:
            query_params.append(('access_date', params['access_date']))  # noqa: E501
        if 'gid' in params:
            query_params.append(('gid', params['gid']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_executions/{task_execution_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file(self, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def show_file_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_cloud_pool(self, cloud_pool_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_cloud_pool(cloud_pool_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_pool_id: Numeric ID or name of cloud pool. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_cloud_pool_with_http_info(cloud_pool_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_cloud_pool_with_http_info(cloud_pool_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_cloud_pool_with_http_info(self, cloud_pool_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_cloud_pool_with_http_info(cloud_pool_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_pool_id: Numeric ID or name of cloud pool. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_pool_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_cloud_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_pool_id' is set
        if ('cloud_pool_id' not in params or
                params['cloud_pool_id'] is None):
            raise ValueError("Missing the required parameter `cloud_pool_id` when calling `show_file_by_cloud_pool`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_cloud_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_pool_id' in params:
            path_params['cloud_pool_id'] = params['cloud_pool_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cloud_pools/{cloud_pool_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_container(self, container_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_container(container_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_id: Numeric ID or name of container. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_container_with_http_info(container_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_container_with_http_info(container_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_container_with_http_info(self, container_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_container_with_http_info(container_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_id: Numeric ID or name of container. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `show_file_by_container`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{container_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_nas_pool(self, nas_pool_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_nas_pool(nas_pool_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nas_pool_id: Numeric ID or name of NAS pool. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_nas_pool_with_http_info(nas_pool_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_nas_pool_with_http_info(nas_pool_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_nas_pool_with_http_info(self, nas_pool_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_nas_pool_with_http_info(nas_pool_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nas_pool_id: Numeric ID or name of NAS pool. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nas_pool_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_nas_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nas_pool_id' is set
        if ('nas_pool_id' not in params or
                params['nas_pool_id'] is None):
            raise ValueError("Missing the required parameter `nas_pool_id` when calling `show_file_by_nas_pool`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_nas_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nas_pool_id' in params:
            path_params['nas_pool_id'] = params['nas_pool_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nas_pools/{nas_pool_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_tape_pool(self, tape_pool_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_tape_pool(tape_pool_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_tape_pool_with_http_info(tape_pool_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_tape_pool_with_http_info(tape_pool_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_tape_pool_with_http_info(self, tape_pool_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_tape_pool_with_http_info(tape_pool_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `show_file_by_tape_pool`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_task(self, task_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_task(task_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_task_with_http_info(task_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_task_with_http_info(task_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_task_with_http_info(self, task_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_task_with_http_info(task_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `show_file_by_task`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_task_execution(self, task_execution_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_task_execution(task_execution_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_task_execution_with_http_info(task_execution_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_task_execution_with_http_info(task_execution_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_task_execution_with_http_info(self, task_execution_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_task_execution_with_http_info(task_execution_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_execution_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_task_execution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_execution_id' is set
        if ('task_execution_id' not in params or
                params['task_execution_id'] is None):
            raise ValueError("Missing the required parameter `task_execution_id` when calling `show_file_by_task_execution`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_task_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_execution_id' in params:
            path_params['task_execution_id'] = params['task_execution_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/task_executions/{task_execution_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_file_by_task_execution_by_task(self, task_id, task_execution_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_task_execution_by_task(task_id, task_execution_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_file_by_task_execution_by_task_with_http_info(self, task_id, task_execution_id, file_id, **kwargs):  # noqa: E501
        """Displays a specific file.  # noqa: E501

        **API Key Scope**: files / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID. (required)
        :param int task_execution_id: Numeric ID of task execution. (required)
        :param int file_id: Numeric ID of file. (required)
        :return: NodeumFileWithPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task_execution_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_file_by_task_execution_by_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `show_file_by_task_execution_by_task`")  # noqa: E501
        # verify the required parameter 'task_execution_id' is set
        if ('task_execution_id' not in params or
                params['task_execution_id'] is None):
            raise ValueError("Missing the required parameter `task_execution_id` when calling `show_file_by_task_execution_by_task`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `show_file_by_task_execution_by_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501
        if 'task_execution_id' in params:
            path_params['task_execution_id'] = params['task_execution_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeumFileWithPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
