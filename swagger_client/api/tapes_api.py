# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TapesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def index_tapes(self, **kwargs):  # noqa: E501
        """Lists all tapes.  # noqa: E501

        **API Key Scope**: tapes / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tapes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str tape_library_id: Filter on tape library id
        :param str tape_pool_id: Filter on tape pool id
        :param str barcode: Filter on barcode
        :param str location: Filter on location
        :param str type: Filter on type
        :param str locked: Filter on locked
        :param str scratch: Filter on scratch
        :param str cleaning: Filter on cleaning
        :param str write_protect: Filter on write protect
        :param str mounted: Filter on mounted
        :param str ejected: Filter on ejected
        :param str known: Filter on known
        :param str mount_count: Filter on mount count
        :param str date_in: Filter on date in
        :param str date_move: Filter on date move
        :param str free: Filter on free
        :param str max: Filter on max
        :param str last_size_update: Filter on last size update
        :param str last_maintenance: Filter on last maintenance
        :param str last_repack: Filter on last repack
        :param str repack_status: Filter on repack status
        :param str hash: Filter on hash
        :param str force_import_type: Filter on force import type
        :param str need_to_check: Filter on need to check
        :return: TapeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_tapes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.index_tapes_with_http_info(**kwargs)  # noqa: E501
            return data

    def index_tapes_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all tapes.  # noqa: E501

        **API Key Scope**: tapes / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tapes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str tape_library_id: Filter on tape library id
        :param str tape_pool_id: Filter on tape pool id
        :param str barcode: Filter on barcode
        :param str location: Filter on location
        :param str type: Filter on type
        :param str locked: Filter on locked
        :param str scratch: Filter on scratch
        :param str cleaning: Filter on cleaning
        :param str write_protect: Filter on write protect
        :param str mounted: Filter on mounted
        :param str ejected: Filter on ejected
        :param str known: Filter on known
        :param str mount_count: Filter on mount count
        :param str date_in: Filter on date in
        :param str date_move: Filter on date move
        :param str free: Filter on free
        :param str max: Filter on max
        :param str last_size_update: Filter on last size update
        :param str last_maintenance: Filter on last maintenance
        :param str last_repack: Filter on last repack
        :param str repack_status: Filter on repack status
        :param str hash: Filter on hash
        :param str force_import_type: Filter on force import type
        :param str need_to_check: Filter on need to check
        :return: TapeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'sort_by', 'id', 'tape_library_id', 'tape_pool_id', 'barcode', 'location', 'type', 'locked', 'scratch', 'cleaning', 'write_protect', 'mounted', 'ejected', 'known', 'mount_count', 'date_in', 'date_move', 'free', 'max', 'last_size_update', 'last_maintenance', 'last_repack', 'repack_status', 'hash', 'force_import_type', 'need_to_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_tapes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
            collection_formats['sort_by'] = 'pipes'  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'tape_library_id' in params:
            query_params.append(('tape_library_id', params['tape_library_id']))  # noqa: E501
        if 'tape_pool_id' in params:
            query_params.append(('tape_pool_id', params['tape_pool_id']))  # noqa: E501
        if 'barcode' in params:
            query_params.append(('barcode', params['barcode']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'locked' in params:
            query_params.append(('locked', params['locked']))  # noqa: E501
        if 'scratch' in params:
            query_params.append(('scratch', params['scratch']))  # noqa: E501
        if 'cleaning' in params:
            query_params.append(('cleaning', params['cleaning']))  # noqa: E501
        if 'write_protect' in params:
            query_params.append(('write_protect', params['write_protect']))  # noqa: E501
        if 'mounted' in params:
            query_params.append(('mounted', params['mounted']))  # noqa: E501
        if 'ejected' in params:
            query_params.append(('ejected', params['ejected']))  # noqa: E501
        if 'known' in params:
            query_params.append(('known', params['known']))  # noqa: E501
        if 'mount_count' in params:
            query_params.append(('mount_count', params['mount_count']))  # noqa: E501
        if 'date_in' in params:
            query_params.append(('date_in', params['date_in']))  # noqa: E501
        if 'date_move' in params:
            query_params.append(('date_move', params['date_move']))  # noqa: E501
        if 'free' in params:
            query_params.append(('free', params['free']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'last_size_update' in params:
            query_params.append(('last_size_update', params['last_size_update']))  # noqa: E501
        if 'last_maintenance' in params:
            query_params.append(('last_maintenance', params['last_maintenance']))  # noqa: E501
        if 'last_repack' in params:
            query_params.append(('last_repack', params['last_repack']))  # noqa: E501
        if 'repack_status' in params:
            query_params.append(('repack_status', params['repack_status']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501
        if 'force_import_type' in params:
            query_params.append(('force_import_type', params['force_import_type']))  # noqa: E501
        if 'need_to_check' in params:
            query_params.append(('need_to_check', params['need_to_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tapes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_tapes_by_tape_library(self, tape_library_id, **kwargs):  # noqa: E501
        """Lists all tapes.  # noqa: E501

        **API Key Scope**: tapes / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tapes_by_tape_library(tape_library_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_library_id: Numeric ID, serial, or name of tape library. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str tape_pool_id: Filter on tape pool id
        :param str barcode: Filter on barcode
        :param str location: Filter on location
        :param str type: Filter on type
        :param str locked: Filter on locked
        :param str scratch: Filter on scratch
        :param str cleaning: Filter on cleaning
        :param str write_protect: Filter on write protect
        :param str mounted: Filter on mounted
        :param str ejected: Filter on ejected
        :param str known: Filter on known
        :param str mount_count: Filter on mount count
        :param str date_in: Filter on date in
        :param str date_move: Filter on date move
        :param str free: Filter on free
        :param str max: Filter on max
        :param str last_size_update: Filter on last size update
        :param str last_maintenance: Filter on last maintenance
        :param str last_repack: Filter on last repack
        :param str repack_status: Filter on repack status
        :param str hash: Filter on hash
        :param str force_import_type: Filter on force import type
        :param str need_to_check: Filter on need to check
        :return: TapeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_tapes_by_tape_library_with_http_info(tape_library_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_tapes_by_tape_library_with_http_info(tape_library_id, **kwargs)  # noqa: E501
            return data

    def index_tapes_by_tape_library_with_http_info(self, tape_library_id, **kwargs):  # noqa: E501
        """Lists all tapes.  # noqa: E501

        **API Key Scope**: tapes / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tapes_by_tape_library_with_http_info(tape_library_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_library_id: Numeric ID, serial, or name of tape library. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str tape_pool_id: Filter on tape pool id
        :param str barcode: Filter on barcode
        :param str location: Filter on location
        :param str type: Filter on type
        :param str locked: Filter on locked
        :param str scratch: Filter on scratch
        :param str cleaning: Filter on cleaning
        :param str write_protect: Filter on write protect
        :param str mounted: Filter on mounted
        :param str ejected: Filter on ejected
        :param str known: Filter on known
        :param str mount_count: Filter on mount count
        :param str date_in: Filter on date in
        :param str date_move: Filter on date move
        :param str free: Filter on free
        :param str max: Filter on max
        :param str last_size_update: Filter on last size update
        :param str last_maintenance: Filter on last maintenance
        :param str last_repack: Filter on last repack
        :param str repack_status: Filter on repack status
        :param str hash: Filter on hash
        :param str force_import_type: Filter on force import type
        :param str need_to_check: Filter on need to check
        :return: TapeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_library_id', 'limit', 'offset', 'sort_by', 'id', 'tape_pool_id', 'barcode', 'location', 'type', 'locked', 'scratch', 'cleaning', 'write_protect', 'mounted', 'ejected', 'known', 'mount_count', 'date_in', 'date_move', 'free', 'max', 'last_size_update', 'last_maintenance', 'last_repack', 'repack_status', 'hash', 'force_import_type', 'need_to_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_tapes_by_tape_library" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_library_id' is set
        if ('tape_library_id' not in params or
                params['tape_library_id'] is None):
            raise ValueError("Missing the required parameter `tape_library_id` when calling `index_tapes_by_tape_library`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_library_id' in params:
            path_params['tape_library_id'] = params['tape_library_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
            collection_formats['sort_by'] = 'pipes'  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'tape_pool_id' in params:
            query_params.append(('tape_pool_id', params['tape_pool_id']))  # noqa: E501
        if 'barcode' in params:
            query_params.append(('barcode', params['barcode']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'locked' in params:
            query_params.append(('locked', params['locked']))  # noqa: E501
        if 'scratch' in params:
            query_params.append(('scratch', params['scratch']))  # noqa: E501
        if 'cleaning' in params:
            query_params.append(('cleaning', params['cleaning']))  # noqa: E501
        if 'write_protect' in params:
            query_params.append(('write_protect', params['write_protect']))  # noqa: E501
        if 'mounted' in params:
            query_params.append(('mounted', params['mounted']))  # noqa: E501
        if 'ejected' in params:
            query_params.append(('ejected', params['ejected']))  # noqa: E501
        if 'known' in params:
            query_params.append(('known', params['known']))  # noqa: E501
        if 'mount_count' in params:
            query_params.append(('mount_count', params['mount_count']))  # noqa: E501
        if 'date_in' in params:
            query_params.append(('date_in', params['date_in']))  # noqa: E501
        if 'date_move' in params:
            query_params.append(('date_move', params['date_move']))  # noqa: E501
        if 'free' in params:
            query_params.append(('free', params['free']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'last_size_update' in params:
            query_params.append(('last_size_update', params['last_size_update']))  # noqa: E501
        if 'last_maintenance' in params:
            query_params.append(('last_maintenance', params['last_maintenance']))  # noqa: E501
        if 'last_repack' in params:
            query_params.append(('last_repack', params['last_repack']))  # noqa: E501
        if 'repack_status' in params:
            query_params.append(('repack_status', params['repack_status']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501
        if 'force_import_type' in params:
            query_params.append(('force_import_type', params['force_import_type']))  # noqa: E501
        if 'need_to_check' in params:
            query_params.append(('need_to_check', params['need_to_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_libraries/{tape_library_id}/tapes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_tapes_by_tape_pool(self, tape_pool_id, **kwargs):  # noqa: E501
        """Lists all tapes.  # noqa: E501

        **API Key Scope**: tapes / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tapes_by_tape_pool(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str tape_library_id: Filter on tape library id
        :param str barcode: Filter on barcode
        :param str location: Filter on location
        :param str type: Filter on type
        :param str locked: Filter on locked
        :param str scratch: Filter on scratch
        :param str cleaning: Filter on cleaning
        :param str write_protect: Filter on write protect
        :param str mounted: Filter on mounted
        :param str ejected: Filter on ejected
        :param str known: Filter on known
        :param str mount_count: Filter on mount count
        :param str date_in: Filter on date in
        :param str date_move: Filter on date move
        :param str free: Filter on free
        :param str max: Filter on max
        :param str last_size_update: Filter on last size update
        :param str last_maintenance: Filter on last maintenance
        :param str last_repack: Filter on last repack
        :param str repack_status: Filter on repack status
        :param str hash: Filter on hash
        :param str force_import_type: Filter on force import type
        :param str need_to_check: Filter on need to check
        :return: TapeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_tapes_by_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_tapes_by_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
            return data

    def index_tapes_by_tape_pool_with_http_info(self, tape_pool_id, **kwargs):  # noqa: E501
        """Lists all tapes.  # noqa: E501

        **API Key Scope**: tapes / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tapes_by_tape_pool_with_http_info(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str tape_library_id: Filter on tape library id
        :param str barcode: Filter on barcode
        :param str location: Filter on location
        :param str type: Filter on type
        :param str locked: Filter on locked
        :param str scratch: Filter on scratch
        :param str cleaning: Filter on cleaning
        :param str write_protect: Filter on write protect
        :param str mounted: Filter on mounted
        :param str ejected: Filter on ejected
        :param str known: Filter on known
        :param str mount_count: Filter on mount count
        :param str date_in: Filter on date in
        :param str date_move: Filter on date move
        :param str free: Filter on free
        :param str max: Filter on max
        :param str last_size_update: Filter on last size update
        :param str last_maintenance: Filter on last maintenance
        :param str last_repack: Filter on last repack
        :param str repack_status: Filter on repack status
        :param str hash: Filter on hash
        :param str force_import_type: Filter on force import type
        :param str need_to_check: Filter on need to check
        :return: TapeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id', 'limit', 'offset', 'sort_by', 'id', 'tape_library_id', 'barcode', 'location', 'type', 'locked', 'scratch', 'cleaning', 'write_protect', 'mounted', 'ejected', 'known', 'mount_count', 'date_in', 'date_move', 'free', 'max', 'last_size_update', 'last_maintenance', 'last_repack', 'repack_status', 'hash', 'force_import_type', 'need_to_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_tapes_by_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `index_tapes_by_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
            collection_formats['sort_by'] = 'pipes'  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'tape_library_id' in params:
            query_params.append(('tape_library_id', params['tape_library_id']))  # noqa: E501
        if 'barcode' in params:
            query_params.append(('barcode', params['barcode']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'locked' in params:
            query_params.append(('locked', params['locked']))  # noqa: E501
        if 'scratch' in params:
            query_params.append(('scratch', params['scratch']))  # noqa: E501
        if 'cleaning' in params:
            query_params.append(('cleaning', params['cleaning']))  # noqa: E501
        if 'write_protect' in params:
            query_params.append(('write_protect', params['write_protect']))  # noqa: E501
        if 'mounted' in params:
            query_params.append(('mounted', params['mounted']))  # noqa: E501
        if 'ejected' in params:
            query_params.append(('ejected', params['ejected']))  # noqa: E501
        if 'known' in params:
            query_params.append(('known', params['known']))  # noqa: E501
        if 'mount_count' in params:
            query_params.append(('mount_count', params['mount_count']))  # noqa: E501
        if 'date_in' in params:
            query_params.append(('date_in', params['date_in']))  # noqa: E501
        if 'date_move' in params:
            query_params.append(('date_move', params['date_move']))  # noqa: E501
        if 'free' in params:
            query_params.append(('free', params['free']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'last_size_update' in params:
            query_params.append(('last_size_update', params['last_size_update']))  # noqa: E501
        if 'last_maintenance' in params:
            query_params.append(('last_maintenance', params['last_maintenance']))  # noqa: E501
        if 'last_repack' in params:
            query_params.append(('last_repack', params['last_repack']))  # noqa: E501
        if 'repack_status' in params:
            query_params.append(('repack_status', params['repack_status']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501
        if 'force_import_type' in params:
            query_params.append(('force_import_type', params['force_import_type']))  # noqa: E501
        if 'need_to_check' in params:
            query_params.append(('need_to_check', params['need_to_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}/tapes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_tape(self, tape_id, **kwargs):  # noqa: E501
        """Displays a specific tape.  # noqa: E501

        **API Key Scope**: tapes / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape(tape_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_id: Numeric ID, or barcode of tape. (required)
        :return: Tape
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_tape_with_http_info(tape_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_tape_with_http_info(tape_id, **kwargs)  # noqa: E501
            return data

    def show_tape_with_http_info(self, tape_id, **kwargs):  # noqa: E501
        """Displays a specific tape.  # noqa: E501

        **API Key Scope**: tapes / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_with_http_info(tape_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_id: Numeric ID, or barcode of tape. (required)
        :return: Tape
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_tape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_id' is set
        if ('tape_id' not in params or
                params['tape_id'] is None):
            raise ValueError("Missing the required parameter `tape_id` when calling `show_tape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_id' in params:
            path_params['tape_id'] = params['tape_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tapes/{tape_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tape',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_tape_by_tape_library(self, tape_library_id, tape_id, **kwargs):  # noqa: E501
        """Displays a specific tape.  # noqa: E501

        **API Key Scope**: tapes / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_by_tape_library(tape_library_id, tape_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_library_id: Numeric ID, serial, or name of tape library. (required)
        :param str tape_id: Numeric ID, or barcode of tape. (required)
        :return: Tape
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_tape_by_tape_library_with_http_info(tape_library_id, tape_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_tape_by_tape_library_with_http_info(tape_library_id, tape_id, **kwargs)  # noqa: E501
            return data

    def show_tape_by_tape_library_with_http_info(self, tape_library_id, tape_id, **kwargs):  # noqa: E501
        """Displays a specific tape.  # noqa: E501

        **API Key Scope**: tapes / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_by_tape_library_with_http_info(tape_library_id, tape_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_library_id: Numeric ID, serial, or name of tape library. (required)
        :param str tape_id: Numeric ID, or barcode of tape. (required)
        :return: Tape
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_library_id', 'tape_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_tape_by_tape_library" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_library_id' is set
        if ('tape_library_id' not in params or
                params['tape_library_id'] is None):
            raise ValueError("Missing the required parameter `tape_library_id` when calling `show_tape_by_tape_library`")  # noqa: E501
        # verify the required parameter 'tape_id' is set
        if ('tape_id' not in params or
                params['tape_id'] is None):
            raise ValueError("Missing the required parameter `tape_id` when calling `show_tape_by_tape_library`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_library_id' in params:
            path_params['tape_library_id'] = params['tape_library_id']  # noqa: E501
        if 'tape_id' in params:
            path_params['tape_id'] = params['tape_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_libraries/{tape_library_id}/tapes/{tape_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tape',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_tape_by_tape_pool(self, tape_pool_id, tape_id, **kwargs):  # noqa: E501
        """Displays a specific tape.  # noqa: E501

        **API Key Scope**: tapes / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_by_tape_pool(tape_pool_id, tape_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param str tape_id: Numeric ID, or barcode of tape. (required)
        :return: Tape
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_tape_by_tape_pool_with_http_info(tape_pool_id, tape_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_tape_by_tape_pool_with_http_info(tape_pool_id, tape_id, **kwargs)  # noqa: E501
            return data

    def show_tape_by_tape_pool_with_http_info(self, tape_pool_id, tape_id, **kwargs):  # noqa: E501
        """Displays a specific tape.  # noqa: E501

        **API Key Scope**: tapes / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_by_tape_pool_with_http_info(tape_pool_id, tape_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param str tape_id: Numeric ID, or barcode of tape. (required)
        :return: Tape
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id', 'tape_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_tape_by_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `show_tape_by_tape_pool`")  # noqa: E501
        # verify the required parameter 'tape_id' is set
        if ('tape_id' not in params or
                params['tape_id'] is None):
            raise ValueError("Missing the required parameter `tape_id` when calling `show_tape_by_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501
        if 'tape_id' in params:
            path_params['tape_id'] = params['tape_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}/tapes/{tape_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tape',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
