# coding: utf-8

"""
    Nodeum API

    Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TapePoolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_tape_pool(self, tape_pool_body, **kwargs):  # noqa: E501
        """Creates a new tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tape_pool(tape_pool_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TapePoolUp tape_pool_body: (required)
        :return: TapePool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_tape_pool_with_http_info(tape_pool_body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_tape_pool_with_http_info(tape_pool_body, **kwargs)  # noqa: E501
            return data

    def create_tape_pool_with_http_info(self, tape_pool_body, **kwargs):  # noqa: E501
        """Creates a new tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tape_pool_with_http_info(tape_pool_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TapePoolUp tape_pool_body: (required)
        :return: TapePool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_body' is set
        if ('tape_pool_body' not in params or
                params['tape_pool_body'] is None):
            raise ValueError("Missing the required parameter `tape_pool_body` when calling `create_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tape_pool_body' in params:
            body_params = params['tape_pool_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapePool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_tape_pool(self, tape_pool_id, **kwargs):  # noqa: E501
        """Destroys a specific tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_tape_pool(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
            return data

    def destroy_tape_pool_with_http_info(self, tape_pool_id, **kwargs):  # noqa: E501
        """Destroys a specific tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_tape_pool_with_http_info(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `destroy_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_tape_pools(self, **kwargs):  # noqa: E501
        """Lists all tape pools.  # noqa: E501

        **API Key Scope**: tape_pools / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tape_pools(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str name: Filter on name
        :param str comment: Filter on comment
        :param str type: Filter on type
        :return: TapePoolCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_tape_pools_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.index_tape_pools_with_http_info(**kwargs)  # noqa: E501
            return data

    def index_tape_pools_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all tape pools.  # noqa: E501

        **API Key Scope**: tape_pools / index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_tape_pools_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of items to display for pagination.
        :param int offset: The number of items to skip for pagination.
        :param list[str] sort_by: Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
        :param str id: Filter on id
        :param str name: Filter on name
        :param str comment: Filter on comment
        :param str type: Filter on type
        :return: TapePoolCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'sort_by', 'id', 'name', 'comment', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_tape_pools" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
            collection_formats['sort_by'] = 'pipes'  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapePoolCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_tape_pool(self, tape_pool_id, **kwargs):  # noqa: E501
        """Displays a specific tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_pool(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :return: TapePool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_tape_pool_with_http_info(tape_pool_id, **kwargs)  # noqa: E501
            return data

    def show_tape_pool_with_http_info(self, tape_pool_id, **kwargs):  # noqa: E501
        """Displays a specific tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_tape_pool_with_http_info(tape_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :return: TapePool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `show_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapePool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tape_pool(self, tape_pool_id, tape_pool_body, **kwargs):  # noqa: E501
        """Updates a specific tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tape_pool(tape_pool_id, tape_pool_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param TapePoolUp tape_pool_body: (required)
        :return: TapePool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tape_pool_with_http_info(tape_pool_id, tape_pool_body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tape_pool_with_http_info(tape_pool_id, tape_pool_body, **kwargs)  # noqa: E501
            return data

    def update_tape_pool_with_http_info(self, tape_pool_id, tape_pool_body, **kwargs):  # noqa: E501
        """Updates a specific tape pool.  # noqa: E501

        **API Key Scope**: tape_pools / update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tape_pool_with_http_info(tape_pool_id, tape_pool_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tape_pool_id: Numeric ID, or name of tape pool. (required)
        :param TapePoolUp tape_pool_body: (required)
        :return: TapePool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tape_pool_id', 'tape_pool_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tape_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tape_pool_id' is set
        if ('tape_pool_id' not in params or
                params['tape_pool_id'] is None):
            raise ValueError("Missing the required parameter `tape_pool_id` when calling `update_tape_pool`")  # noqa: E501
        # verify the required parameter 'tape_pool_body' is set
        if ('tape_pool_body' not in params or
                params['tape_pool_body'] is None):
            raise ValueError("Missing the required parameter `tape_pool_body` when calling `update_tape_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tape_pool_id' in params:
            path_params['tape_pool_id'] = params['tape_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tape_pool_body' in params:
            body_params = params['tape_pool_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tape_pools/{tape_pool_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapePool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
