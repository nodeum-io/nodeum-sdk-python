# coding: utf-8

"""
    Nodeum API Reference

    The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nodeum_sdk.configuration import Configuration


class TaskSourceUp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'int',
        'file_path': 'str',
        'import_file_id': 'int',
        'import_file_path': 'str',
        'tape_id': 'int',
        'tape_barcode': 'str',
        'tape_pool_id': 'int',
        'tape_pool_name': 'str',
        'cloud_pool_id': 'int',
        'cloud_pool_name': 'str',
        'nas_pool_id': 'int',
        'nas_pool_name': 'str'
    }

    attribute_map = {
        'file_id': 'file_id',
        'file_path': 'file_path',
        'import_file_id': 'import_file_id',
        'import_file_path': 'import_file_path',
        'tape_id': 'tape_id',
        'tape_barcode': 'tape_barcode',
        'tape_pool_id': 'tape_pool_id',
        'tape_pool_name': 'tape_pool_name',
        'cloud_pool_id': 'cloud_pool_id',
        'cloud_pool_name': 'cloud_pool_name',
        'nas_pool_id': 'nas_pool_id',
        'nas_pool_name': 'nas_pool_name'
    }

    def __init__(self, file_id=None, file_path=None, import_file_id=None, import_file_path=None, tape_id=None, tape_barcode=None, tape_pool_id=None, tape_pool_name=None, cloud_pool_id=None, cloud_pool_name=None, nas_pool_id=None, nas_pool_name=None, local_vars_configuration=None):  # noqa: E501
        """TaskSourceUp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._file_path = None
        self._import_file_id = None
        self._import_file_path = None
        self._tape_id = None
        self._tape_barcode = None
        self._tape_pool_id = None
        self._tape_pool_name = None
        self._cloud_pool_id = None
        self._cloud_pool_name = None
        self._nas_pool_id = None
        self._nas_pool_name = None
        self.discriminator = None

        if file_id is not None:
            self.file_id = file_id
        if file_path is not None:
            self.file_path = file_path
        if import_file_id is not None:
            self.import_file_id = import_file_id
        if import_file_path is not None:
            self.import_file_path = import_file_path
        if tape_id is not None:
            self.tape_id = tape_id
        if tape_barcode is not None:
            self.tape_barcode = tape_barcode
        if tape_pool_id is not None:
            self.tape_pool_id = tape_pool_id
        if tape_pool_name is not None:
            self.tape_pool_name = tape_pool_name
        if cloud_pool_id is not None:
            self.cloud_pool_id = cloud_pool_id
        if cloud_pool_name is not None:
            self.cloud_pool_name = cloud_pool_name
        if nas_pool_id is not None:
            self.nas_pool_id = nas_pool_id
        if nas_pool_name is not None:
            self.nas_pool_name = nas_pool_name

    @property
    def file_id(self):
        """Gets the file_id of this TaskSourceUp.  # noqa: E501


        :return: The file_id of this TaskSourceUp.  # noqa: E501
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this TaskSourceUp.


        :param file_id: The file_id of this TaskSourceUp.  # noqa: E501
        :type: int
        """

        self._file_id = file_id

    @property
    def file_path(self):
        """Gets the file_path of this TaskSourceUp.  # noqa: E501


        :return: The file_path of this TaskSourceUp.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this TaskSourceUp.


        :param file_path: The file_path of this TaskSourceUp.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def import_file_id(self):
        """Gets the import_file_id of this TaskSourceUp.  # noqa: E501


        :return: The import_file_id of this TaskSourceUp.  # noqa: E501
        :rtype: int
        """
        return self._import_file_id

    @import_file_id.setter
    def import_file_id(self, import_file_id):
        """Sets the import_file_id of this TaskSourceUp.


        :param import_file_id: The import_file_id of this TaskSourceUp.  # noqa: E501
        :type: int
        """

        self._import_file_id = import_file_id

    @property
    def import_file_path(self):
        """Gets the import_file_path of this TaskSourceUp.  # noqa: E501


        :return: The import_file_path of this TaskSourceUp.  # noqa: E501
        :rtype: str
        """
        return self._import_file_path

    @import_file_path.setter
    def import_file_path(self, import_file_path):
        """Sets the import_file_path of this TaskSourceUp.


        :param import_file_path: The import_file_path of this TaskSourceUp.  # noqa: E501
        :type: str
        """

        self._import_file_path = import_file_path

    @property
    def tape_id(self):
        """Gets the tape_id of this TaskSourceUp.  # noqa: E501


        :return: The tape_id of this TaskSourceUp.  # noqa: E501
        :rtype: int
        """
        return self._tape_id

    @tape_id.setter
    def tape_id(self, tape_id):
        """Sets the tape_id of this TaskSourceUp.


        :param tape_id: The tape_id of this TaskSourceUp.  # noqa: E501
        :type: int
        """

        self._tape_id = tape_id

    @property
    def tape_barcode(self):
        """Gets the tape_barcode of this TaskSourceUp.  # noqa: E501


        :return: The tape_barcode of this TaskSourceUp.  # noqa: E501
        :rtype: str
        """
        return self._tape_barcode

    @tape_barcode.setter
    def tape_barcode(self, tape_barcode):
        """Sets the tape_barcode of this TaskSourceUp.


        :param tape_barcode: The tape_barcode of this TaskSourceUp.  # noqa: E501
        :type: str
        """

        self._tape_barcode = tape_barcode

    @property
    def tape_pool_id(self):
        """Gets the tape_pool_id of this TaskSourceUp.  # noqa: E501


        :return: The tape_pool_id of this TaskSourceUp.  # noqa: E501
        :rtype: int
        """
        return self._tape_pool_id

    @tape_pool_id.setter
    def tape_pool_id(self, tape_pool_id):
        """Sets the tape_pool_id of this TaskSourceUp.


        :param tape_pool_id: The tape_pool_id of this TaskSourceUp.  # noqa: E501
        :type: int
        """

        self._tape_pool_id = tape_pool_id

    @property
    def tape_pool_name(self):
        """Gets the tape_pool_name of this TaskSourceUp.  # noqa: E501


        :return: The tape_pool_name of this TaskSourceUp.  # noqa: E501
        :rtype: str
        """
        return self._tape_pool_name

    @tape_pool_name.setter
    def tape_pool_name(self, tape_pool_name):
        """Sets the tape_pool_name of this TaskSourceUp.


        :param tape_pool_name: The tape_pool_name of this TaskSourceUp.  # noqa: E501
        :type: str
        """

        self._tape_pool_name = tape_pool_name

    @property
    def cloud_pool_id(self):
        """Gets the cloud_pool_id of this TaskSourceUp.  # noqa: E501


        :return: The cloud_pool_id of this TaskSourceUp.  # noqa: E501
        :rtype: int
        """
        return self._cloud_pool_id

    @cloud_pool_id.setter
    def cloud_pool_id(self, cloud_pool_id):
        """Sets the cloud_pool_id of this TaskSourceUp.


        :param cloud_pool_id: The cloud_pool_id of this TaskSourceUp.  # noqa: E501
        :type: int
        """

        self._cloud_pool_id = cloud_pool_id

    @property
    def cloud_pool_name(self):
        """Gets the cloud_pool_name of this TaskSourceUp.  # noqa: E501


        :return: The cloud_pool_name of this TaskSourceUp.  # noqa: E501
        :rtype: str
        """
        return self._cloud_pool_name

    @cloud_pool_name.setter
    def cloud_pool_name(self, cloud_pool_name):
        """Sets the cloud_pool_name of this TaskSourceUp.


        :param cloud_pool_name: The cloud_pool_name of this TaskSourceUp.  # noqa: E501
        :type: str
        """

        self._cloud_pool_name = cloud_pool_name

    @property
    def nas_pool_id(self):
        """Gets the nas_pool_id of this TaskSourceUp.  # noqa: E501


        :return: The nas_pool_id of this TaskSourceUp.  # noqa: E501
        :rtype: int
        """
        return self._nas_pool_id

    @nas_pool_id.setter
    def nas_pool_id(self, nas_pool_id):
        """Sets the nas_pool_id of this TaskSourceUp.


        :param nas_pool_id: The nas_pool_id of this TaskSourceUp.  # noqa: E501
        :type: int
        """

        self._nas_pool_id = nas_pool_id

    @property
    def nas_pool_name(self):
        """Gets the nas_pool_name of this TaskSourceUp.  # noqa: E501


        :return: The nas_pool_name of this TaskSourceUp.  # noqa: E501
        :rtype: str
        """
        return self._nas_pool_name

    @nas_pool_name.setter
    def nas_pool_name(self, nas_pool_name):
        """Sets the nas_pool_name of this TaskSourceUp.


        :param nas_pool_name: The nas_pool_name of this TaskSourceUp.  # noqa: E501
        :type: str
        """

        self._nas_pool_name = nas_pool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskSourceUp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskSourceUp):
            return True

        return self.to_dict() != other.to_dict()
