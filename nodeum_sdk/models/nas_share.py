# coding: utf-8

"""
    Nodeum API

    # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nodeum_sdk.configuration import Configuration


class NasShare(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'nas_id': 'int',
        'pool_id': 'int',
        'name': 'str',
        'path': 'str',
        'options': 'str',
        'username': 'str',
        'password': 'str'
    }

    attribute_map = {
        'id': 'id',
        'nas_id': 'nas_id',
        'pool_id': 'pool_id',
        'name': 'name',
        'path': 'path',
        'options': 'options',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, id=None, nas_id=None, pool_id=None, name=None, path=None, options=None, username=None, password=None, local_vars_configuration=None):  # noqa: E501
        """NasShare - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._nas_id = None
        self._pool_id = None
        self._name = None
        self._path = None
        self._options = None
        self._username = None
        self._password = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if nas_id is not None:
            self.nas_id = nas_id
        if pool_id is not None:
            self.pool_id = pool_id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if options is not None:
            self.options = options
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password

    @property
    def id(self):
        """Gets the id of this NasShare.  # noqa: E501


        :return: The id of this NasShare.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NasShare.


        :param id: The id of this NasShare.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def nas_id(self):
        """Gets the nas_id of this NasShare.  # noqa: E501


        :return: The nas_id of this NasShare.  # noqa: E501
        :rtype: int
        """
        return self._nas_id

    @nas_id.setter
    def nas_id(self, nas_id):
        """Sets the nas_id of this NasShare.


        :param nas_id: The nas_id of this NasShare.  # noqa: E501
        :type: int
        """

        self._nas_id = nas_id

    @property
    def pool_id(self):
        """Gets the pool_id of this NasShare.  # noqa: E501


        :return: The pool_id of this NasShare.  # noqa: E501
        :rtype: int
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this NasShare.


        :param pool_id: The pool_id of this NasShare.  # noqa: E501
        :type: int
        """

        self._pool_id = pool_id

    @property
    def name(self):
        """Gets the name of this NasShare.  # noqa: E501


        :return: The name of this NasShare.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasShare.


        :param name: The name of this NasShare.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this NasShare.  # noqa: E501


        :return: The path of this NasShare.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NasShare.


        :param path: The path of this NasShare.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def options(self):
        """Gets the options of this NasShare.  # noqa: E501


        :return: The options of this NasShare.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this NasShare.


        :param options: The options of this NasShare.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def username(self):
        """Gets the username of this NasShare.  # noqa: E501


        :return: The username of this NasShare.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NasShare.


        :param username: The username of this NasShare.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this NasShare.  # noqa: E501


        :return: The password of this NasShare.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NasShare.


        :param password: The password of this NasShare.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasShare):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NasShare):
            return True

        return self.to_dict() != other.to_dict()
