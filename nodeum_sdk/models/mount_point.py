# coding: utf-8

"""
    Nodeum API Reference

    The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nodeum_sdk.configuration import Configuration


class MountPoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'comment': 'str',
        'target': 'str',
        'type': 'str',
        'options': 'str',
        'username': 'str',
        'password': 'str',
        'scan_interval': 'str',
        'price': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'comment': 'comment',
        'target': 'target',
        'type': 'type',
        'options': 'options',
        'username': 'username',
        'password': 'password',
        'scan_interval': 'scan_interval',
        'price': 'price'
    }

    def __init__(self, id=None, name=None, comment=None, target=None, type=None, options=None, username=None, password=None, scan_interval=None, price=None, local_vars_configuration=None):  # noqa: E501
        """MountPoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._comment = None
        self._target = None
        self._type = None
        self._options = None
        self._username = None
        self._password = None
        self._scan_interval = None
        self._price = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if target is not None:
            self.target = target
        if type is not None:
            self.type = type
        if options is not None:
            self.options = options
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if scan_interval is not None:
            self.scan_interval = scan_interval
        if price is not None:
            self.price = price

    @property
    def id(self):
        """Gets the id of this MountPoint.  # noqa: E501


        :return: The id of this MountPoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MountPoint.


        :param id: The id of this MountPoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MountPoint.  # noqa: E501


        :return: The name of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MountPoint.


        :param name: The name of this MountPoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this MountPoint.  # noqa: E501


        :return: The comment of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MountPoint.


        :param comment: The comment of this MountPoint.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def target(self):
        """Gets the target of this MountPoint.  # noqa: E501


        :return: The target of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MountPoint.


        :param target: The target of this MountPoint.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this MountPoint.  # noqa: E501


        :return: The type of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MountPoint.


        :param type: The type of this MountPoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["smb_v1", "smb_v2_1", "smb_v3", "nfs_v3", "nfs_v4", "storenext_v5"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def options(self):
        """Gets the options of this MountPoint.  # noqa: E501


        :return: The options of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MountPoint.


        :param options: The options of this MountPoint.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def username(self):
        """Gets the username of this MountPoint.  # noqa: E501


        :return: The username of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MountPoint.


        :param username: The username of this MountPoint.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this MountPoint.  # noqa: E501


        :return: The password of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MountPoint.


        :param password: The password of this MountPoint.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def scan_interval(self):
        """Gets the scan_interval of this MountPoint.  # noqa: E501


        :return: The scan_interval of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._scan_interval

    @scan_interval.setter
    def scan_interval(self, scan_interval):
        """Sets the scan_interval of this MountPoint.


        :param scan_interval: The scan_interval of this MountPoint.  # noqa: E501
        :type: str
        """

        self._scan_interval = scan_interval

    @property
    def price(self):
        """Gets the price of this MountPoint.  # noqa: E501


        :return: The price of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this MountPoint.


        :param price: The price of this MountPoint.  # noqa: E501
        :type: str
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MountPoint):
            return True

        return self.to_dict() != other.to_dict()
