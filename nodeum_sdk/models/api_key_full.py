# coding: utf-8

"""
    Nodeum API

    # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nodeum_sdk.configuration import Configuration


class ApiKeyFull(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'key': 'str',
        'name': 'str',
        'api_key_scopes': 'list[ApiKeyScope]'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'name': 'name',
        'api_key_scopes': 'api_key_scopes'
    }

    def __init__(self, id=None, key=None, name=None, api_key_scopes=None, local_vars_configuration=None):  # noqa: E501
        """ApiKeyFull - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._key = None
        self._name = None
        self._api_key_scopes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if api_key_scopes is not None:
            self.api_key_scopes = api_key_scopes

    @property
    def id(self):
        """Gets the id of this ApiKeyFull.  # noqa: E501


        :return: The id of this ApiKeyFull.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKeyFull.


        :param id: The id of this ApiKeyFull.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ApiKeyFull.  # noqa: E501


        :return: The key of this ApiKeyFull.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApiKeyFull.


        :param key: The key of this ApiKeyFull.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ApiKeyFull.  # noqa: E501


        :return: The name of this ApiKeyFull.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyFull.


        :param name: The name of this ApiKeyFull.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_key_scopes(self):
        """Gets the api_key_scopes of this ApiKeyFull.  # noqa: E501


        :return: The api_key_scopes of this ApiKeyFull.  # noqa: E501
        :rtype: list[ApiKeyScope]
        """
        return self._api_key_scopes

    @api_key_scopes.setter
    def api_key_scopes(self, api_key_scopes):
        """Sets the api_key_scopes of this ApiKeyFull.


        :param api_key_scopes: The api_key_scopes of this ApiKeyFull.  # noqa: E501
        :type: list[ApiKeyScope]
        """

        self._api_key_scopes = api_key_scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyFull):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiKeyFull):
            return True

        return self.to_dict() != other.to_dict()
